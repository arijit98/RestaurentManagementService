/*
 * This file is generated by jOOQ.
 */
package com.arijit.restaurant.tables;


import com.arijit.restaurant.Public;
import com.arijit.restaurant.tables.records.OrderItemsRecord;

import java.util.UUID;
import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OrderItems extends TableImpl<OrderItemsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.order_items</code>
     */
    public static final OrderItems ORDER_ITEMS = new OrderItems();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrderItemsRecord> getRecordType() {
        return OrderItemsRecord.class;
    }

    /**
     * The column <code>public.order_items.order_id</code>.
     */
    public final TableField<OrderItemsRecord, UUID> ORDER_ID = createField(DSL.name("order_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.order_items.menu_id</code>.
     */
    public final TableField<OrderItemsRecord, UUID> MENU_ID = createField(DSL.name("menu_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.order_items.quantity</code>.
     */
    public final TableField<OrderItemsRecord, Integer> QUANTITY = createField(DSL.name("quantity"), SQLDataType.INTEGER.nullable(false), this, "");

    private OrderItems(Name alias, Table<OrderItemsRecord> aliased) {
        this(alias, aliased, null);
    }

    private OrderItems(Name alias, Table<OrderItemsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.order_items</code> table reference
     */
    public OrderItems(String alias) {
        this(DSL.name(alias), ORDER_ITEMS);
    }

    /**
     * Create an aliased <code>public.order_items</code> table reference
     */
    public OrderItems(Name alias) {
        this(alias, ORDER_ITEMS);
    }

    /**
     * Create a <code>public.order_items</code> table reference
     */
    public OrderItems() {
        this(DSL.name("order_items"), null);
    }

    public <O extends Record> OrderItems(Table<O> child, ForeignKey<O, OrderItemsRecord> key) {
        super(child, key, ORDER_ITEMS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public OrderItems as(String alias) {
        return new OrderItems(DSL.name(alias), this);
    }

    @Override
    public OrderItems as(Name alias) {
        return new OrderItems(alias, this);
    }

    @Override
    public OrderItems as(Table<?> alias) {
        return new OrderItems(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public OrderItems rename(String name) {
        return new OrderItems(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OrderItems rename(Name name) {
        return new OrderItems(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public OrderItems rename(Table<?> name) {
        return new OrderItems(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<UUID, UUID, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super UUID, ? super UUID, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super UUID, ? super UUID, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
