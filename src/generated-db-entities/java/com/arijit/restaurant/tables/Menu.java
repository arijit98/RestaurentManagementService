/*
 * This file is generated by jOOQ.
 */
package com.arijit.restaurant.tables;


import com.arijit.restaurant.Keys;
import com.arijit.restaurant.Public;
import com.arijit.restaurant.tables.records.MenuRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Menu extends TableImpl<MenuRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.menu</code>
     */
    public static final Menu MENU = new Menu();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MenuRecord> getRecordType() {
        return MenuRecord.class;
    }

    /**
     * The column <code>public.menu.id</code>.
     */
    public final TableField<MenuRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.menu.item_name</code>.
     */
    public final TableField<MenuRecord, String> ITEM_NAME = createField(DSL.name("item_name"), SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>public.menu.status</code>.
     */
    public final TableField<MenuRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>public.menu.price</code>.
     */
    public final TableField<MenuRecord, Double> PRICE = createField(DSL.name("price"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.menu.description</code>.
     */
    public final TableField<MenuRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.menu.created_at</code>.
     */
    public final TableField<MenuRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(3), this, "");

    /**
     * The column <code>public.menu.updated_at</code>.
     */
    public final TableField<MenuRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(3), this, "");

    /**
     * The column <code>public.menu.restaurant_id</code>.
     */
    public final TableField<MenuRecord, UUID> RESTAURANT_ID = createField(DSL.name("restaurant_id"), SQLDataType.UUID, this, "");

    private Menu(Name alias, Table<MenuRecord> aliased) {
        this(alias, aliased, null);
    }

    private Menu(Name alias, Table<MenuRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.menu</code> table reference
     */
    public Menu(String alias) {
        this(DSL.name(alias), MENU);
    }

    /**
     * Create an aliased <code>public.menu</code> table reference
     */
    public Menu(Name alias) {
        this(alias, MENU);
    }

    /**
     * Create a <code>public.menu</code> table reference
     */
    public Menu() {
        this(DSL.name("menu"), null);
    }

    public <O extends Record> Menu(Table<O> child, ForeignKey<O, MenuRecord> key) {
        super(child, key, MENU);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<ForeignKey<MenuRecord, ?>> getReferences() {
        return Arrays.asList(Keys.MENU__FK_MENU_RESTAURANT);
    }

    private transient Restaurant _restaurant;

    /**
     * Get the implicit join path to the <code>public.restaurant</code> table.
     */
    public Restaurant restaurant() {
        if (_restaurant == null)
            _restaurant = new Restaurant(this, Keys.MENU__FK_MENU_RESTAURANT);

        return _restaurant;
    }

    @Override
    public Menu as(String alias) {
        return new Menu(DSL.name(alias), this);
    }

    @Override
    public Menu as(Name alias) {
        return new Menu(alias, this);
    }

    @Override
    public Menu as(Table<?> alias) {
        return new Menu(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Menu rename(String name) {
        return new Menu(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Menu rename(Name name) {
        return new Menu(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Menu rename(Table<?> name) {
        return new Menu(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<UUID, String, String, Double, String, LocalDateTime, LocalDateTime, UUID> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super UUID, ? super String, ? super String, ? super Double, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? super UUID, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super UUID, ? super String, ? super String, ? super Double, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? super UUID, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
